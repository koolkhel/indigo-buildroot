diff --git a/src/modbus-private.h b/src/modbus-private.h
index 7994459..4cf53c0 100644
--- a/src/modbus-private.h
+++ b/src/modbus-private.h
@@ -110,7 +110,7 @@
     int (*connect) (modbus_t *ctx);
     void (*close) (modbus_t *ctx);
     int (*flush) (modbus_t *ctx);
-    int (*select) (modbus_t *ctx, fd_set *rset, struct timeval *tv, int msg_length);
+    int (*select) (modbus_t *ctx, fd_set *rset, const struct timeval *tv, int msg_length);
 } modbus_backend_t;
 
 struct _modbus {
diff --git a/src/modbus-rtu.c b/src/modbus-rtu.c
index 37ff71a..e13e00f 100644
--- a/src/modbus-rtu.c
+++ b/src/modbus-rtu.c
@@ -949,12 +949,14 @@ int _modbus_rtu_flush(modbus_t *ctx)
 }
 
 int _modbus_rtu_select(modbus_t *ctx, fd_set *rset,
-                       struct timeval *tv, int length_to_read)
+                       const struct timeval *tv, int length_to_read)
 {
+    // Select is allowed to modify its timeout timeval; take a copy
+    struct timeval to = *tv;
     int s_rc;
 #if defined(_WIN32)
     s_rc = win32_ser_select(&(((modbus_rtu_t*)ctx->backend_data)->w_ser),
-                            length_to_read, tv);
+                            length_to_read, &to);
     if (s_rc == 0) {
         errno = ETIMEDOUT;
         return -1;
@@ -964,7 +966,7 @@ int _modbus_rtu_select(modbus_t *ctx, fd_set *rset,
         return -1;
     }
 #else
-    while ((s_rc = select(ctx->s+1, rset, NULL, NULL, tv)) == -1) {
+    while ((s_rc = select(ctx->s+1, rset, NULL, NULL, &to)) == -1) {
         if (errno == EINTR) {
             if (ctx->debug) {
                 fprintf(stderr, "A non blocked signal was caught\n");
diff --git a/src/modbus-tcp.c b/src/modbus-tcp.c
index b3eae81..45c373d 100644
--- a/src/modbus-tcp.c
+++ b/src/modbus-tcp.c
@@ -201,9 +201,40 @@ int _modbus_tcp_pre_check_confirmation(modbus_t *ctx, const uint8_t *req,
         }
         errno = EMBBADDATA;
         return -1;
-    } else {
-        return 0;
     }
+
+    /* TODO: Check Protocol ID
+     *
+     * if (req[2] != rsp[2] || req[3] != rsp[3]) {
+     *     if (ctx->debug) {
+     *         fprintf(stderr, "Invalid Protocol ID received 0x%X (not 0x%X)\n",
+     *                 (rsp[2] << 8) + rsp[3], (req[2] << 8) + req[3]);
+     *     }
+     *     errno = EMBBADDATA;
+     *     return -1;
+     * }
+     */
+
+    /* 
+     * Check that the Modbus/TCP header length field, matches?  Not really
+     * necessary, because check_confirmation has already confirmed that the
+     * Modbus/TCP code (eg. read holding registers) is correct.  So, don't
+     * bother to check it here.  We don't need to support "unknown" (new) Modbus
+     * codes.
+     */
+
+    /* TODO: Check Unit ID
+     * 
+     * if (req[6] != rsp[6]) {
+     *     if (ctx->debug) {
+     *         fprintf(stderr, "Invalid Unit ID received 0x%X (not 0x%X)\n",
+     *                 (int)rsp[6], (int)req[6]);
+     *     }
+     *     errno = EMBBADDATA;
+     *     return -1;
+     * }
+     */
+    return 0;
 }
 
 static int _modbus_tcp_set_ipv4_options(int s)
@@ -238,7 +269,7 @@ static int _modbus_tcp_set_ipv4_options(int s)
 }
 
 static int _connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen,
-                    struct timeval *tv)
+                    const struct timeval *tv)
 {
     int rc;
 
@@ -247,11 +278,12 @@ static int _connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen,
         fd_set wset;
         int optval;
         socklen_t optlen = sizeof(optval);
+        struct timeval to = *tv;
 
         /* Wait to be available in writing */
         FD_ZERO(&wset);
         FD_SET(sockfd, &wset);
-        rc = select(sockfd + 1, NULL, &wset, NULL, tv);
+        rc = select(sockfd + 1, NULL, &wset, NULL, &to);
         if (rc <= 0) {
             /* Timeout or fail */
             return -1;
@@ -630,10 +662,13 @@ int modbus_tcp_pi_accept(modbus_t *ctx, int *socket)
     return ctx->s;
 }
 
-int _modbus_tcp_select(modbus_t *ctx, fd_set *rset, struct timeval *tv, int length_to_read)
+int _modbus_tcp_select(modbus_t *ctx, fd_set *rset, const struct timeval *tv, int length_to_read)
 {
+    // Take a copy of the original response_timeout; select will adjust this on
+    // each loop, but we don't want to interfere with the original value!
+    struct timeval to = *tv;
     int s_rc;
-    while ((s_rc = select(ctx->s+1, rset, NULL, NULL, tv)) == -1) {
+    while ((s_rc = select(ctx->s+1, rset, NULL, NULL, &to)) == -1) {
         if (errno == EINTR) {
             if (ctx->debug) {
                 fprintf(stderr, "A non blocked signal was caught\n");
diff --git a/src/modbus.c b/src/modbus.c
index c06ee2a..1824cf4 100644
--- a/src/modbus.c
+++ b/src/modbus.c
@@ -526,7 +526,7 @@ static int check_confirmation(modbus_t *ctx, uint8_t *req,
         if (function != req[offset]) {
             if (ctx->debug) {
                 fprintf(stderr,
-                        "Received function not corresponding to the requestd (0x%X != 0x%X)\n",
+                        "Received function not corresponding to the request (0x%X != 0x%X)\n",
                         function, req[offset]);
             }
             if (ctx->error_recovery & MODBUS_ERROR_RECOVERY_PROTOCOL) {
@@ -585,6 +585,14 @@ static int check_confirmation(modbus_t *ctx, uint8_t *req,
             errno = EMBBADDATA;
             rc = -1;
         }
+
+        /*
+         * TODO: For Write Register(s), check for incorrect register and count
+         * in response (not matching request).  Presently, this will allow
+         * incorrect write responses, containing non-matching register and
+         * count.
+         */
+
     } else {
         if (ctx->debug) {
             fprintf(stderr,
